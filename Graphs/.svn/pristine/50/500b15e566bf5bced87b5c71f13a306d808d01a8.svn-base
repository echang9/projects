package graph;

import java.util.HashMap;
import java.util.Collections;
import java.util.ArrayList;

/* See restrictions in Graph.java. */

/** A partial implementation of Graph containing elements common to
 *  directed and undirected graphs.
 *
 *  @author Eric Chang.
 */
abstract class GraphObj extends Graph {

    /** A new, empty Graph. */
    GraphObj() {
        _successors = new HashMap<Integer, ArrayList<Integer>>();
        _predecessors = new HashMap<Integer, ArrayList<Integer>>();
    }

    @Override
    public int vertexSize() {
        return _successors.size();
    }

    @Override
    public int maxVertex() {
        if (_successors.isEmpty()) {
            return 0;
        } else {
            return Collections.max(_successors.keySet());
        }
    }

    @Override
    public int edgeSize() {
        int total = 0;
        for (ArrayList<Integer> lst : _successors.values()) {
            total += lst.size();
        }
        return total;
    }

    @Override
    public abstract boolean isDirected();

    @Override
    public int outDegree(int v) {
        if (!_successors.containsKey(v)) {
            return 0;
        } else {
            return _successors.get(v).size();
        }
    }

    @Override
    public abstract int inDegree(int v);

    @Override
    public boolean contains(int u) {
        return _successors.containsKey(u);
    }

    @Override
    public boolean contains(int u, int v) {
        if (_successors.containsKey(u) && _successors.containsKey(v)) {
            if (_successors.get(u).contains(v) || _successors.get(v).contains(u)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public int add() {
        int minKey = 1;
        for (int key : _successors.keySet()) {
            minKey += 1;
            if (!_successors.containsKey(minKey)) {
                break;
            }
        }
        _successors.put(minKey, new ArrayList<Integer>());
        _predecessors.put(minKey, new ArrayList<Integer>());
        return minKey;
    }

    @Override
    public int add(int u, int v) {
        try {
            if (isDirected() && !_successors.get(u).contains(v)) {
                _successors.get(u).add(v);
                _predecessors.get(v).add(u);
            } else if (!isDirected() && !_successors.get(u).contains(v)
                && !_successors.get(v).contains(u)) {
                _successors.get(u).add(v);
            }
            return u;
        } catch (NullPointerException e) {
            return u;
        }
    }

    @Override
    public void remove(int v) {
        if (_successors.containsKey(v)) {

            for (int[] edge : edges()) {
                if (edge[0] == v) {
                    remove(edge[0], edge[1]);
                }
            }
            _successors.remove(v);
            _predecessors.remove(v);
        } else {
            return;
        }
    }

    @Override
    public void remove(int u, int v) {
        try {
            if (isDirected()) {
                int indexOfSuccessor = _successors.get(u).indexOf(v);
                _successors.get(u).remove(indexOfSuccessor);
                if (_predecessors.containsKey(v)) {
                    int indexOfPredecessor = _predecessors.get(v).indexOf(u);
                    _predecessors.get(v).remove(indexOfPredecessor);
                }
            } else {
                int indexOfFirst = _successors.get(u).indexOf(v);
                _successors.get(u).remove(indexOfFirst);
            }
        } catch (NullPointerException e) {
            return;
        }
    }

    @Override
    public Iteration<Integer> vertices() {
        return Iteration.iteration(_successors.keySet().iterator());
    }

    @Override
    public int successor(int v, int k) {
        if (!_successors.containsKey(v) || k >= _successors.get(v).size()) {
            return 0;
        } else {
            return _successors.get(v).get(k);
        }
    }

    @Override
    public abstract int predecessor(int v, int k);

    @Override
    public Iteration<Integer> successors(int v) {
        return Iteration.iteration(_successors.get(v).iterator());
    }

    @Override
    public abstract Iteration<Integer> predecessors(int v);

    @Override
    public Iteration<int[]> edges() {
        ArrayList<int[]> lstOfEdges = new ArrayList<int[]>();
        for (int vertex : vertices()) {
            for (int successor : successors(vertex)) {
                int[] edge = {vertex, successor};
                lstOfEdges.add(edge);
            }
        }
        return Iteration.iteration(lstOfEdges.iterator());
    }

    @Override
    protected boolean mine(int v) {
        return contains(v);
    }

    @Override
    protected void checkMyVertex(int v) {
        if (!contains(v)) {
            throw new IllegalArgumentException();
        }
    }

    @Override
    protected int edgeId(int u, int v) {
        if (contains(u, v)) {
            return (UNIQUE_ID * u) + v;
        } else {
            return 0;
        }
    }

    /** Adjacency List for succesors represented using a HashMap. */
    protected HashMap<Integer, ArrayList<Integer>> _successors;
    /** Adjacency List for predecessors represented using a HashMap. */
    protected HashMap<Integer, ArrayList<Integer>> _predecessors;
    /** Unique edgeID multipler. */
    private static final int UNIQUE_ID = 10000;
}
