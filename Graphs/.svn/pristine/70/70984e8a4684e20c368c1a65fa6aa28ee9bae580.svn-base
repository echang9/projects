package graph;

/* See restrictions in Graph.java. */

import java.util.List;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Comparator;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Eric Chang.
 */
public abstract class ShortestPaths {

    private class weightComparator implements Comparator<Integer> {

        @Override
        public int compare(Integer x, Integer y) {
            if (getWeight(x) + estimatedDistance(x) < getWeight(y) + estimatedDistance(y)) {
                return -1;
            } else if (getWeight(x) + estimatedDistance(x) > getWeight(y) + estimatedDistance(y)) {
                return 1;
            } else {
                return 0;
            }
        }

    }

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        _weights = new HashMap<Integer, Double>();
        _predecessor = new HashMap<Integer, Integer>();
        Comparator<Integer> comparator = new weightComparator();
        _fringe = new PriorityQueue<Integer>(_G.vertexSize(), comparator);
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        for (int v : _G.vertices()) {
            setWeight(v, Double.POSITIVE_INFINITY);
            setPredecessor(v, -1);
            _fringe.add(v);
        }
        setWeight(_source, 0);
        while (!_fringe.isEmpty()) {
            int closest = _fringe.poll();
            for (int edge : _G.successors(closest)) {
                if (getWeight(closest) + getWeight(closest, edge) < getWeight(edge)) {
                    setWeight(edge, getWeight(closest) + getWeight(closest, edge));
                    setPredecessor(edge, closest);
                }
            }
        }
    }

    /** Returns the starting vertex. */
    public int getSource() {
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME
        return null;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    /** HashMap to store vertex Weights. */
    protected HashMap<Integer, Double> _weights;
    /** Priority Queue ordered by weights. */
    protected PriorityQueue<Integer> _fringe;
    /** HashMap to store predecessors. */
    protected HashMap<Integer, Integer> _predecessor;
}
